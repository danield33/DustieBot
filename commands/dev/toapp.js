/*
    PLEASE DO NOT EDIT THIS FILE - NED
*/
const Discord = require("discord.js");
const { Command } = require('../../util/handlers/command/index.js');
const Guild = require('../../util/models/guild');
const ms = require("ms")
const Tabletop = require('tabletop')


// Please replace Name on line 7 and 27 to command name.
class toApp extends Command {
    constructor() {
        super({
            name: 'toapp',
            category: 'dev', //LOWER CASE!!!!
            dev: true, // Developers only, defined in index.js
        })
    }
    async run(message, args, bot) { // add ', queue' if working with music/voice
        if (!["157945195931893761", "593154369545830422", "220976772286513152"].includes(message.author.id)) return message.channel.send("This is a **manager** ONLY command!")
        let startDate = new Date(),
            applications = [
                "1EFme2vEL-Pwu722oJ1tjrEbt3xdoIQEJ4ECL2dqsmB0", //Dustie Dev
                "1nmNvET9AhWvYs6JLSlfcUwQ3DLgcYWTKq0SKmo8E8-0" //Dustie Survival Staff
            ],
            num = ["0‚É£", "1‚É£", "2‚É£", "3‚É£", "4‚É£", "5‚É£", "6‚É£", "7‚É£", "8‚É£", "9‚É£"],
            responce = "The time has ran out! Try agian later!",
            MsgFilter = m => m.author.id === message.author.id,
            ReactFilter = (reaction, user) => user.id === message.author.id,
            app = 0, sysPage = 0, page = 0, personNum, data, questions, reasons, reason, acc

        let msg = await message.channel.send(screen(`Hello ${message.author.username},`, `Please select which applications you want to reply to:\n${num[0]}**Dustie Developers**\n${num[1]}**Dustie Survival Staff**`))
        await cReact(2)

        const collector = msg.createReactionCollector(ReactFilter, { time: 120000 });

        collector.on('collect', async re => {
            re.remove(message.author).catch((err) => { })
            if (re.emoji.name === "üõë") {
                responce = `Thank you ${message.author.username},\nclosing the menu for you now!`
                return collector.stop()
            }
            switch (sysPage) {
                case (0):
                    app = num.indexOf(re.emoji.name)
                    await msg.clearReactions()
                    msg.edit(loading())
                    return await Tabletop.init({ key: applications[app], callback: gotData, simpleSheet: true });
                case (1):
                    break
                case (2):
                    await msg.clearReactions()
                    await cReact(0)
                    msg.edit(screen("", `${questions.map((q, i) => `${i + 1}) \`${q}\``).join("\n")}\n\n**Please reply with reasons why the user has been ${re.emoji.name === "‚úÖ" ? "accepted" : "denied"}. Example:**\`5 6 9\`\n\nDO NOT GET THIS WRONG xD`))
                    function msgCollector2() {
                        msg.channel.awaitMessages(MsgFilter, { max: 1 }).then(async (collected) => {
                            collected.first().delete()
                            if (collected.first().content.split(" ").map(x => parseInt(x)).includes(NaN)) { screen("", `${questions.map((q, i) => `${i + 1}) \`${q}\``).join("\n")}\n\n**Please reply with reasons why the user has been ${re.emoji.name === "‚úÖ" ? "accepted" : "denied"}. Example:**\`5 6 9\`\n\nYou got it wrong... Try again`); msgCollector2() }
                            [reasons, sysPage] = [collected.first().content.split(" ").map(x => parseInt(x) - 1), 3]
                            await urReason(re.emoji.name === "‚úÖ" ? "accepted" : "denied")
                        })
                    }
                    msgCollector2()
                    return
                case (3):
                    if (re.emoji.name === "‚úÖ") return await complete()
                default:
                    break
            }

        })

        collector.on('end', async re => {
            let endembed = new Discord.RichEmbed()
                .setAuthor(`Bye ${message.author.username},`, bot.user.displayAvatarURL)
                .setColor(bot.embed)
                .setDescription(responce)
            await msg.clearReactions().catch((err) => { })
            return msg.edit(endembed)
        })

        /*
            FUNCTIONS
        */
        async function complete() {
            await msg.clearReactions()
            msg.edit(loading())
            let user = bot.users.find(x => x.tag === data[personNum]["Discord TAG (Name#0000)"])
            let embed = new Discord.RichEmbed()
                .setAuthor(`${acc.toUpperCase().slice(0, 1) + acc.slice(1, acc.length)} by the manager`, bot.user.displayAvatarURL)
                .setColor(acc === "accepted" ? "GREEN" : "RED")
                .setDescription(`Reasons why your application havs been **${acc}**:\n\n${reasons.map(r => `**${questions[r]}**\n\`${data[personNum][questions[r]]}\``).join("\n")}\n\n`)
                .addField(`Reason the manager ${acc} you:`, reason)
                .setFooter("Wait for further response from the Owner!")
            user.send(embed).catch(async err => {
                msg.edit(screen(err.message, "The bot had difficulties messaging the user wether the user has been accepted or denied!\n\nPlease find the user in the corresponding server and send them this message:"))
                let errMsg = await message.channel.send(`\`\`\`\n**${acc.toUpperCase().slice(0, 1) + acc.slice(1, acc.length)}!**\n\nReasons why you have been **${acc}** from the application:\n\n${reasons.map(r => `**${questions[r]}**\n\`${data[personNum][questions[r]]}\``).join("\n")}\n\n\n**Reason the manager ${acc} you**:\n${reason}\`\`\``)
            })

            let embed2 = new Discord.RichEmbed()
                .setAuthor(`${data[personNum]["Discord TAG (Name#0000)"]} ${acc.toUpperCase().slice(0, 1) + acc.slice(1, acc.length)}`, bot.user.displayAvatarURL)
                .setColor(acc === "accepted" ? "GREEN" : "RED")
                .setDescription(Object.values(data[personNum]).map((x, i) => `${i + 1}) **${questions[i]}**\n${x}`).join(`\n\n`) + `\n\n\n`)
                .addField(`Reason the manager ${acc} them:`, reason)
                .setFooter('This applications has been approved by the Manager and forwarded to founder! You will be accepted soon!')
            switch (app) {
                case (0):
                    let users = [bot.users.get("157945195931893761"), bot.users.get("220976772286513152"), bot.users.get("264521312544751617")]
                    for (var x of users) await x.send(embed2)
                    return
                case (1):
                    await bot.guilds.get("584718192904110091").members.get("268401778251268137").send(embed2)
                    await bot.users.get("157945195931893761").send(embed2)
                    return
                default:
                    break
            }
            responce = "Everything was done correctly, thank you!"
            return collector.stop()
        }

        async function urReason(str) {
            acc = str
            msg.edit(screen("Your reason", `Please write your reason why the user has been ${str}.\n\n**You only have one try!**`))
            msg.channel.awaitMessages(MsgFilter, { max: 1 }).then(async (collected) => {
                collected.first().delete()
                reason = collected.first().content
                await cReact(0)
                await msg.react("‚úÖ")
                msg.edit(screen("Last step", "The bot is going to go thorough the accepting process! There might be few errors which you will have to do yourself!"))
            })
        }

        async function gotData(stuff, tabletop) {
            questions = Object.keys(stuff[0])
            data = stuff.reverse();
            await cReact(0)
            msg.edit(screen("Application by?", data.map((x, i) => `${i + 1}) **${x["Discord TAG (Name#0000)"]}**`)))
            sysPage = 1

            async function msgCollector1() {
                msg.channel.awaitMessages(MsgFilter, { max: 1 }).then(async (collected) => {
                    collected.first().delete()
                    if (isNaN(parseInt(collected.first().content))) { msg.edit(screen("Application by?", `${data.map((x, i) => `${i + 1}) **${x["Discord TAG (Name#0000)"]}**`).join("\n")}\n\n**MAKE SURE IT IS A NUMBER!**`)); return msgCollector1() }
                    if (parseInt(collected.first().content) > data.length) { msg.edit(screen("Application by?", `${data.map((x, i) => `${i + 1}) **${x["Discord TAG (Name#0000)"]}**`).join("\n")}\n\n**MAKE SURE IT IS A VALID NUMBER!!**`)); return msgCollector1() }

                    [personNum, sysPage] = [parseInt(collected.first().content) - 1, 2]
                    msg.edit(screen("Accept or Deny?", Object.values(data[personNum]).map((x, i) => `${i + 1}) **${questions[i]}**\n${x}`).join(`\n\n`)))
                    await msg.react("‚úÖ")
                    await msg.react("‚ùé")
                })
            }
            await msgCollector1()
        }
        function screen(title, desc) {
            let embed = new Discord.RichEmbed()
            if (title) embed.setAuthor(title, bot.user.displayAvatarURL)
            embed.setColor(bot.embed)
                .setDescription(desc)
                .setFooter(`Menu closes in ${ms(ms("5m") - (new Date() - startDate), { long: true })}`)
            return embed
        }
        function loading() {
            return new Discord.RichEmbed()
                .setColor(bot.embed)
                .setImage("https://media1.tenor.com/images/b70bcbb718eac9b432c758e1830caf00/tenor.gif?itemid=13678729")
        }
        async function cReact(n) {
            await msg.react("üõë")
            for (var i = 0; i < n; i++) await msg.react(num[i])
        }
    }
}
module.exports = toApp